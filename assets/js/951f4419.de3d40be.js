(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return d})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return y})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return p}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){return function(t){var n=m(t.components);return r.a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=m(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=m(n),p=a,u=d["".concat(o,".").concat(p)]||d[p]||b[p]||i;return n?r.a.createElement(u,c(c({ref:t},s),{},{components:n})):r.a.createElement(u,c({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},350:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/kitty-transfer-shot-f0f27c74d399cadc96e3a2b534cd99e6.png"},68:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(8),i=(n(0),n(188)),o={title:"Creating Custom Components",sidebar_position:2,keywords:"polkadotjs api, frontend"},s={unversionedId:"tutorials/Kitties/Part 2/kitties-frontend-2",id:"tutorials/Kitties/Part 2/kitties-frontend-2",isDocsHomePage:!1,title:"Creating Custom Components",description:"Overview",source:"@site/docs/09-tutorials/01-Kitties/Part 2/kitties-frontend-2.md",sourceDirName:"09-tutorials/01-Kitties/Part 2",slug:"/tutorials/Kitties/Part 2/kitties-frontend-2",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 2/kitties-frontend-2",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/09-tutorials/01-Kitties/Part 2/kitties-frontend-2.md",version:"current",sidebarPosition:2,frontMatter:{title:"Creating Custom Components",sidebar_position:2,keywords:"polkadotjs api, frontend"},sidebar:"tutorialSidebar",previous:{title:"Kitty Front-end Outline",permalink:"/substrate-how-to-guides/docs/tutorials/Kitties/Part 2/kitties-frontend-1"},next:{title:"How-to Template",permalink:"/substrate-how-to-guides/docs/contribute/how-to-template"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Learning outcomes",id:"learning-outcomes",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Create the <code>Kitties.js</code> component",id:"1-create-the-kittiesjs-component",children:[]},{value:"2. Create the <code>KittyAvatar.js</code> component",id:"2-create-the-kittyavatarjs-component",children:[]},{value:"3. Create the <code>TransferModal</code> in <code>KittyCards.js</code>",id:"3-create-the-transfermodal-in-kittycardsjs",children:[]},{value:"4. Create the <code>KittyCard</code> in <code>KittyCards.js</code>",id:"4-create-the-kittycard-in-kittycardsjs",children:[]},{value:"5. Complete <code>Kitties.js</code>",id:"5-complete-kittiesjs",children:[]},{value:"6. Update App.js",id:"6-update-appjs",children:[]}]},{value:"Next steps",id:"next-steps",children:[]}],l={toc:c};function d(e){var t=e.components,o=Object(r.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.default)({},l,o,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("h2",{id:"overview"},"Overview"),Object(i.mdx)("p",null,"In this section, we are going to build the custom components of our Kitty application's front-end."),Object(i.mdx)("p",null,"To recap, these are:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("strong",{parentName:"li"},"the ",Object(i.mdx)("inlineCode",{parentName:"strong"},"Kitties.js")," component:")," this renders KittyCards.js "),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("strong",{parentName:"li"},"the ",Object(i.mdx)("inlineCode",{parentName:"strong"},"KittyAvatar.js")," component:")," this handles the logic that creates an avatar for a Kitty in storage"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("strong",{parentName:"li"},"the ",Object(i.mdx)("inlineCode",{parentName:"strong"},"KittyCards.js")," component:")," this creates a React  ",Object(i.mdx)("inlineCode",{parentName:"li"},"<Card/>")," component to hold Kitty ID, gender, DNA, owner and price")),Object(i.mdx)("h2",{id:"learning-outcomes"},"Learning outcomes"),Object(i.mdx)("p",null,"\u27a1\ufe0f Use PolkadotJS API to create custom React components."),Object(i.mdx)("h2",{id:"steps"},"Steps"),Object(i.mdx)("h3",{id:"1-create-the-kittiesjs-component"},"1. Create the ",Object(i.mdx)("inlineCode",{parentName:"h3"},"Kitties.js")," component"),Object(i.mdx)("p",null,"This is the component that will get rendered by Apps.js. So it does the heavy lifting, with the help of KittyAvatar.js and KittCards.js."),Object(i.mdx)("p",null,"Start by creating a file called ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitties.js")," and paste the following imports:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"import React, { useEffect, useState } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nimport KittyCards from './KittyCards';\n")),Object(i.mdx)("p",null,"The way our custom components will make use of PolkadotJS API is by using ",Object(i.mdx)("inlineCode",{parentName:"p"},"substrate-lib"),", which is a wrapper around ",Object(i.mdx)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/create/"},"Polkadot JS API instance")," and allows us to retrieve the API from the ",Object(i.mdx)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/keyring"},"PolkadotJS keyring"),". This is why we use ",Object(i.mdx)("inlineCode",{parentName:"p"},"useSubstrate")," which is exported by ",Object(i.mdx)("inlineCode",{parentName:"p"},"src/substrate-lib/SubstrateContext.js")," and used to create the wrapper."),Object(i.mdx)("p",null,"Then, there's a couple things to set up:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"we'll need a function to help construct the Kitty ID from a storage key"),Object(i.mdx)("li",{parentName:"ul"},"we'll need a function to hold a Kitty object "),Object(i.mdx)("li",{parentName:"ul"},"we'll rely on ",Object(i.mdx)("inlineCode",{parentName:"li"},"useEffect")," from ",Object(i.mdx)("inlineCode",{parentName:"li"},"import React, { useEffect, useState } from 'react';")," to listen for changes in our node's storage using React hooks")),Object(i.mdx)("p",null,"Proceed by pasting in the following code snippet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"// Construct a Kitty ID from storage key\nconst convertToKittyHash = entry =>\n  `0x${entry[0].toJSON().slice(-64)}`;\n\n// Construct a Kitty object \nconst constructKitty = (hash, { dna, price, gender, owner }) => ({\n  id: hash,\n  dna,\n  price: price.toJSON(),\n  gender: gender.toJSON(),\n  owner: owner.toJSON()\n});\n\n// Use React hooks\nexport default function Kitties (props) {\n  const { api, keyring } = useSubstrate();\n  const { accountPair } = props;\n\n  const [kittyHashes, setKittyHashes] = useState([]);\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState('');\n// snip\n")),Object(i.mdx)("p",null,"There are two things our app needs to listen for: changes in the amount of Kitties and changes in the Kitty object. To do this we'll create a subscription function for each."),Object(i.mdx)("p",null,"The way we're going to listen for a change in the amount of Kitties is by querying our node using ",Object(i.mdx)("inlineCode",{parentName:"p"},"api.query.kitties.kittyCnt"),", which\nqueries ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCnt")," from our Kitties pallet storage item. Then, we'll use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"entries()")," method from PolkadotJS API to construct a Kitty\nID using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"convertToKittyHash")," function."),Object(i.mdx)("p",null,"Paste the following snippet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"// Subscription function for setting Kitty IDs\n  const subscribeKittyCnt = () => {\n    let unsub = null;\n\n    const asyncFetch = async () => {\n        // Query KittyCnt from runtime\n      unsub = await api.query.kitties.kittyCnt(async cnt => {\n        // Fetch all Kitty objects using entries()\n        const entries = await api.query.kitties.kitties.entries();\n        // Retrieve only the Kitty ID and set to state\n        const hashes = entries.map(convertToKittyHash);\n        setKittyHashes(hashes);\n      });\n    };\n\n    asyncFetch();\n\n    // return the unsubscription cleanup function\n    return () => {\n      unsub && unsub();\n    };\n  };\n")),Object(i.mdx)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(i.mdx)("h5",{parentName:"div"},Object(i.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Further Learning ")),Object(i.mdx)("div",{parentName:"div",className:"admonition-content"},Object(i.mdx)("p",{parentName:"div"},Object(i.mdx)("inlineCode",{parentName:"p"},"entries()")," is a Polkadot JS API function that gives us the entire storage map. If there's nothing in storage, it passes in ",Object(i.mdx)("inlineCode",{parentName:"p"},"None")," which acts\nas a ",Object(i.mdx)("em",{parentName:"p"},"promise")," to React hooks. With ",Object(i.mdx)("inlineCode",{parentName:"p"},"entries()")," we get a key and a kitty object."),Object(i.mdx)("p",{parentName:"div"},"You can see this in action if you go to the console of your browser running a node Front-end and entering ",Object(i.mdx)("inlineCode",{parentName:"p"},"entries"),". Or get the first Kitty object in storage by doing: ",Object(i.mdx)("inlineCode",{parentName:"p"},"entries[0][1].toJSON()"),". "))),Object(i.mdx)("p",null,"Similarly for ",Object(i.mdx)("inlineCode",{parentName:"p"},"subscribeKitties"),", paste the following code snippet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"  // Subscription function to construct a Kitty object\n  const subscribeKitties = () => {\n    let unsub = null;\n\n    const asyncFetch = async () => {\n        // Get Kitty objects from storage \n      unsub = await api.query.kitties.kitties.multi(kittyHashes, kitties => {\n        // Create an array of Kitty objects from `constructKitty`\n        const kittyArr = kitties\n          .map((kitty, ind) => constructKitty(kittyHashes[ind], kitty.value));\n        // Set the array of Kitty objects to state\n        setKitties(kittyArr);\n      });\n    };\n\n    asyncFetch();\n\n    // return the unsubscription cleanup function\n    return () => {\n      unsub && unsub();\n    };\n  };\n")),Object(i.mdx)("h4",{id:"understanding-how-we-retrieve-the-kitty-hash"},"Understanding how we retrieve the Kitty Hash"),Object(i.mdx)("p",null,"The PolkadotJS API uses the pallet name and storgae item for the first 64 bits and the unique storage item hash for the remaining 64 bits. We want to get rid of those and only keep the remaining bits which will be our kitty Hash, which is why we use:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"const convertToKittyHash = entry =>\n  `0x${entry[0].toJSON().slice(-64)}`;\n")),Object(i.mdx)("p",null,"And then we use it in the subscription function to get all Kitty IDs:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"   const asyncFetch = async () => {\n      unsub = await api.query.kitties.kittyCnt(async cnt => {\n        // Fetch all kitty keys\n        const entries = await api.query.kitties.kitties.entries();\n        const hashes = entries.map(convertToKittyHash);\n        setKittyHashes(hashes);\n      });\n    };\n")),Object(i.mdx)("h4",{id:"clean-up-functions"},"Clean up functions"),Object(i.mdx)("p",null,"In ",Object(i.mdx)("inlineCode",{parentName:"p"},"asyncFetch")," we're constantly listening to the Kitties storage. This is in relation to using Effects with Cleanup (see ","[React docs]",")",Object(i.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup"},"https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup"),")). When the component is teared down, it will make sure that all remaining subscription functions are cleaned up:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"  // return the unsubscription cleanup function\n    return () => {\n      unsub && unsub();\n    };\n  };\n")),Object(i.mdx)("p",null,"Now all that's left to do for our component to listen for changes in our node's runtime storgae is to pass in ",Object(i.mdx)("inlineCode",{parentName:"p"},"subscribeKittyCnt")," and\n",Object(i.mdx)("inlineCode",{parentName:"p"},"subscribeKitties")," to React's ",Object(i.mdx)("inlineCode",{parentName:"p"},"useEffect")," function. Hence: "),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"  useEffect(subscribeKittyCnt, [api, keyring]);\n  useEffect(subscribeKitties, [api, kittyHashes]);\n")),Object(i.mdx)("p",null,'Learn more about how "Effect Hooks" work in ',Object(i.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},"React's documentation"),"."),Object(i.mdx)("p",null,"Congratulations! What we've done up until here prepares how the Kitty object and other storage items will be accessible to our React components."),Object(i.mdx)("h3",{id:"2-create-the-kittyavatarjs-component"},"2. Create the ",Object(i.mdx)("inlineCode",{parentName:"h3"},"KittyAvatar.js")," component"),Object(i.mdx)("p",null,"In this component, all we're doing is mapping a library of PNG images to the bytes of our Kitty DNA. Since it's mostly all Javascript,\nwe won't be going into much detail. "),Object(i.mdx)("p",null,"Create a file in ",Object(i.mdx)("inlineCode",{parentName:"p"},"src/")," called ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyAvatar.js")," and paste in the following code:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\n// Generate an array [start, start + 1, ..., end] inclusively\nconst genArray = (start, end) =>\n  Array.from(Array(end - start + 1).keys()).map(v => v + start);\n\nconst IMAGES = {\n  accessory: genArray(1, 20).map(n =>\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/accessorie_${n}.png`),\n  body: genArray(1, 15).map(n =>\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/body_${n}.png`),\n  eyes: genArray(1, 15).map(n =>\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/eyes_${n}.png`),\n  mouth: genArray(1, 10).map(n =>\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/mouth_${n}.png`),\n  fur: genArray(1, 10).map(n =>\n    `${process.env.PUBLIC_URL}/assets/KittyAvatar/fur_${n}.png`)\n};\n\nconst dnaToAttributes = dna => {\n  const attribute = (index, type) => IMAGES[type][dna[index] % IMAGES[type].length];\n\n  return {\n    body: attribute(0, 'body'),\n    eyes: attribute(1, 'eyes'),\n    accessory: attribute(2, 'accessory'),\n    fur: attribute(3, 'fur'),\n    mouth: attribute(4, 'mouth')\n  };\n};\n\nconst KittyAvatar = props => {\n  const outerStyle = { height: '160px', position: 'relative', width: '50%' };\n  const innerStyle = { height: '150px', position: 'absolute', top: '3%', left: '50%' };\n  const { dna } = props;\n\n  if (!dna) return null;\n\n  const cat = dnaToAttributes(dna);\n  return <div style={outerStyle}>\n    <img alt='body' src={cat.body} style={innerStyle} />\n    <img alt='fur' src={cat.fur} style={innerStyle} />\n    <img alt='mouth' src={cat.mouth} style={innerStyle} />\n    <img alt='eyes' src={cat.eyes} style={innerStyle} />\n    <img alt='accessory' src={cat.accessory} style={innerStyle} />\n  </div>;\n};\n\nexport default KittyAvatar;\n")),Object(i.mdx)("p",null,"Notice that the only properties being passed is ",Object(i.mdx)("inlineCode",{parentName:"p"},"dna"),", which will be passed in from ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCards.js"),".\nThe logic in this component is based on a specific ",Object(i.mdx)("a",{parentName:"p",href:"https://framagit.org/Deevad/cat-avatar-generator/-/tree/master/avatars/cat"},'"cat avatar generator" library'),' by David Revoy. Download it and paste its contents inside a new folder called\n"KittyAvatar" in ',Object(i.mdx)("inlineCode",{parentName:"p"},"public/assets/KittyAvatar"),"."),Object(i.mdx)("h3",{id:"3-create-the-transfermodal-in-kittycardsjs"},"3. Create the ",Object(i.mdx)("inlineCode",{parentName:"h3"},"TransferModal")," in ",Object(i.mdx)("inlineCode",{parentName:"h3"},"KittyCards.js")),Object(i.mdx)("p",null,"Our ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCards.js")," component will have three sections to it:"),Object(i.mdx)("p",null,"i. ",Object(i.mdx)("inlineCode",{parentName:"p"},"TransferModal"),": a modal that uses the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TxButton")," component. "),Object(i.mdx)("p",null,"ii. ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCard"),": a card that renders the Kitty avatar using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyAvatar.js")," component as well as all other Kitty information (id, dna, owner, gender and price)."),Object(i.mdx)("p",null,"iii. ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCards"),": a component that renders a grid for ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCard")," (yes, singular!) described above. "),Object(i.mdx)("p",null,"As a preliminary step, create a new file called ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCards.js")," and add the following imports:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { Button, Card, Grid, Message, Modal, Form, Label } from 'semantic-ui-react';\n\nimport KittyAvatar from './KittyAvatar'; \nimport { TxButton } from './substrate-lib/components';\n")),Object(i.mdx)("h4",{id:"i-outlining-the-transfermodal"},"i. Outlining the TransferModal"),Object(i.mdx)("p",null,"Let's outline what the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TransferModal")," will do. Conveniently, the Substrate Front-end Template comes with a component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"TxButton")," which is a useful way to include a transfer button\nthat interacts with a node. This component will allow us to make an RPC call\ninto our node and trigger a signed extrinsic for the Kitties pallet. "),Object(i.mdx)("p",null,"The way it is built can be broken down into the following pieces:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},'A "transfer" button exists, which upon being clicked opens up a modal'),Object(i.mdx)("li",{parentName:"ul"},'This modal, we\'ll call "Kitty Transfer" is a ',Object(i.mdx)("inlineCode",{parentName:"li"},"Form")," containing (1) the Kitty ID and (2) an input field for a receiving adress"),Object(i.mdx)("li",{parentName:"ul"},'It also contains a "transfer" and "cancel" button ')),Object(i.mdx)("p",null,"See the screenshot taken below for reference: "),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"Kitty Transfer",src:n(350).default})),Object(i.mdx)("h4",{id:"ii-setting-up-react-hooks"},"ii. Setting up React hooks"),Object(i.mdx)("p",null,'The first thing we\'ll do is pass in the properties (or "props") we need from ',Object(i.mdx)("inlineCode",{parentName:"p"},"kitty"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"accountPair")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"setStatus")," using React hooks. Do this by pasting in the following code snippet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"const TransferModal = props => {\n  const { kitty, accountPair, setStatus } = props;\n  const [open, setOpen] = React.useState(false);\n  const [formValue, setFormValue] = React.useState({});\n\n  const formChange = key => (ev, el) => {\n    setFormValue({ ...formValue, [key]: el.value });\n  };\n")),Object(i.mdx)("p",null,"And now, close the React hook subscription function:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"  const confirmAndClose = (unsub) => {\n    unsub();\n    setOpen(false);\n  };\n")),Object(i.mdx)("h4",{id:"iii-composing-the-modal"},"iii. Composing the modal"),Object(i.mdx)("p",null,'To recap: our Kitty Card has a "transfer" button that opens up a\nmodal where a user can choose an address to send their Kitty to. That modal will have:'),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"a Title"),Object(i.mdx)("li",{parentName:"ul"},"an input field for a Kitty ID"),Object(i.mdx)("li",{parentName:"ul"},"an input field for an Account ID")),Object(i.mdx)("p",null,"In addition, it will have:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},'a "cancel" button which closes the Transfer modal'),Object(i.mdx)("li",{parentName:"ul"},"the ",Object(i.mdx)("inlineCode",{parentName:"li"},"TxButton")," React component to trigger the transaction")),Object(i.mdx)("p",null,"Here's what this looks like in code ","\u2014"," paste this in to complete ",Object(i.mdx)("inlineCode",{parentName:"p"},"TransferModal")," and read the comments to follow what each\nchunk of code is doing:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"return <Modal onClose={() => setOpen(false)} onOpen={() => setOpen(true)} open={open}\n    trigger={<Button basic color='blue'>Transfer</Button>}>\n\n    // The title of the modal\n    <Modal.Header>Kitty Transfer</Modal.Header>\n\n    <Modal.Content><Form>\n    // The modal's inputs fields\n      <Form.Input fluid label='Kitty ID' readOnly value={kitty.id}/>\n      <Form.Input fluid label='Receiver' placeholder='Receiver Address' onChange={formChange('target')}/>\n    </Form></Modal.Content>\n\n    <Modal.Actions>\n      // The cancel button\n      <Button basic color='grey' onClick={() => setOpen(false)}>Cancel</Button>\n      // The TxButton component\n      <TxButton\n        accountPair={accountPair} label='Transfer' type='SIGNED-TX' setStatus={setStatus}\n        onClick={confirmAndClose}\n        attrs={{\n          palletRpc: 'kitties',\n          callable: 'transfer',\n          inputParams: [formValue.target, kitty.id],\n          paramFields: [true, true]\n        }}\n      />\n    </Modal.Actions>\n  </Modal>;\n")),Object(i.mdx)("p",null,"The next part of our ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCards.js")," component is to create the part that renders the ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyAvatar.js")," component and the data passed in from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"kitties")," props in ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitty.js"),"."),Object(i.mdx)("h3",{id:"4-create-the-kittycard-in-kittycardsjs"},"4. Create the ",Object(i.mdx)("inlineCode",{parentName:"h3"},"KittyCard")," in ",Object(i.mdx)("inlineCode",{parentName:"h3"},"KittyCards.js")),Object(i.mdx)("p",null,"We'll use React's ",Object(i.mdx)("inlineCode",{parentName:"p"},"Card")," component to create a card that render the Kitty avatar as well as the Kitty ID, DNA, gender, owner and price."),Object(i.mdx)("p",null,"As you might have guessed, we'll use React props to pass in data to our KittyCard. Paste the following code snippet, reading through the comments to understand each code snippet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"// Use props\nconst KittyCard = props => {\n  const { kitty, accountPair, setStatus } = props;\n  const { id = null, dna = null, owner = null, gender = null, price = null } = kitty;\n  const displayDna = dna && dna.toJSON();\n  const isSelf = accountPair.address === kitty.owner;\n")),Object(i.mdx)("p",null,"Now let's make use of the previously imported ",Object(i.mdx)("inlineCode",{parentName:"p"},"Card")," component:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"return <Card>\n    { isSelf && <Label as='a' floating color='teal'>Mine</Label> }\n    // Render the Kitty Avatar\n    <KittyAvatar dna={dna.toU8a()} />\n    <Card.Content>\n    // Display the Kitty ID\n      <Card.Header style={{ fontSize: '1em', overflowWrap: 'break-word' }}>\n        ID: {id}\n      </Card.Header>\n      // Display the Kitty DNA\n      <Card.Meta style={{ fontSize: '.9em', overflowWrap: 'break-word' }}>\n        DNA: {displayDna}\n      </Card.Meta>\n      // Display the Kitty ID, Gender, Owner and Price\n      <Card.Description>\n        <p style={{ overflowWrap: 'break-word' }}>\n          Gender: {gender}\n        </p>\n        <p style={{ overflowWrap: 'break-word' }}>\n          Owner: {owner}\n        </p>\n        <p style={{ overflowWrap: 'break-word' }}>\n          Price: {price}\n        </p>\n      </Card.Description>\n    </Card.Content>\n")),Object(i.mdx)("p",null,"Before closing the ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Card/>")," component we want to render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TransferModal")," we privously built ","\u2014"," ",Object(i.mdx)("strong",{parentName:"p"},"only if the Kitty is transferrable by the acitve user account"),". Paste this code snippet to handle this functionality:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"    // Render the transfer button using TransferModal\n    <Card.Content extra style={{ textAlign: 'center' }}>{ owner === accountPair.address\n      ? <TransferModal kitty={kitty} accountPair={accountPair} setStatus={setStatus}/>\n      : ''\n    }</Card.Content>\n  </Card>;\n")),Object(i.mdx)("h4",{id:"rendering-the-card"},"Rendering the card"),Object(i.mdx)("p",null,"It's time to put all the pieces we've built together. In this function, we'll: "),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Check whether there's any Kitties to render and render a ",Object(i.mdx)("em",{parentName:"li"},'"No Kitty found here... Create one now!"')," message if there aren't any"),Object(i.mdx)("li",{parentName:"ul"},"If there are, render them in a 3 column grid")),Object(i.mdx)("p",null,"Have a look at the comments to understand the parts of this code snippet:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"const KittyCards = props => {\n  const { kitties, accountPair, setStatus } = props;\n\n// Check the number of Kitties\n  if (kitties.length === 0) {\n    return <Message info>\n      <Message.Header>No Kitty found here... Create one now!&nbsp;\n        <span role='img' aria-label='point-down'>\ud83d\udc47</span>\n      </Message.Header>\n    </Message>;\n  }\n// Render Kitties using Kitty Card in a grid\n  return <Grid columns={3}>{kitties.map((kitty, i) =>\n    <Grid.Column key={`kitty-${i}`}>\n      <KittyCard kitty={kitty} accountPair={accountPair} setStatus={setStatus}/>\n    </Grid.Column>\n  )}</Grid>;\n};\n")),Object(i.mdx)("p",null,"And complete the component with:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"export default KittyCards;\n")),Object(i.mdx)("h3",{id:"5-complete-kittiesjs"},"5. Complete ",Object(i.mdx)("inlineCode",{parentName:"h3"},"Kitties.js")),Object(i.mdx)("p",null,"Now that we've built all the bits for our front-end application, we can piece everything together."),Object(i.mdx)("p",null,"Go back to the incompleted ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitties.js")," file and paste this code snippet to render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"KittyCard.js")," component inside a ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Grid/>"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"return <Grid.Column width={16}>\n    <h1>Kitties</h1>\n    <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\n")),Object(i.mdx)("p",null,"Now we'll use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Form/>")," component to render our application's ",Object(i.mdx)("inlineCode",{parentName:"p"},"TxButton")," component: "),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"    <Form style={{ margin: '1em 0' }}>\n      <Form.Field style={{ textAlign: 'center' }}>\n        <TxButton\n          accountPair={accountPair} label='Create Kitty' type='SIGNED-TX' setStatus={setStatus}\n          attrs={{\n            palletRpc: 'kitties',\n            callable: 'createKitty',\n            inputParams: [],\n            paramFields: []\n          }}\n        />\n      </Form.Field>\n    </Form>\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n  </Grid.Column>;\n")),Object(i.mdx)("h3",{id:"6-update-appjs"},"6. Update App.js"),Object(i.mdx)("p",null,"In order to render Kitties.js, we need to as a row item to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Container/>")," in App.js:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-js"},"<Grid.Row>\n    <Kitties accountPair={accountPair} />\n</Grid.Row>\n")),Object(i.mdx)("p",null,"Congratulations! You've finsished the front-end turorial! Now run ",Object(i.mdx)("inlineCode",{parentName:"p"},"yarn start"),", refresh your browser and you should be able to start interacting with your node."),Object(i.mdx)("h2",{id:"next-steps"},"Next steps"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Explore the Polkadot JS API ",Object(i.mdx)("a",{parentName:"li",href:"https://polkadot.js.org/docs/api/cookbook"},"cookbook"))))}d.isMDXComponent=!0}}]);
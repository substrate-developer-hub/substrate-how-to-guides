(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.a.createElement(e,s({},t,{components:n}))}},m=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=m(n),d=r,p=l["".concat(s,".").concat(d)]||l[d]||b[d]||o;return n?a.a.createElement(p,i(i({ref:t},c),{},{components:n})):a.a.createElement(p,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var u=2;u<o;u++)s[u]=n[u];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},69:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(8),o=(n(0),n(188)),s={sidebar_position:1,keywords:"testing, runtime, beginner"},c={unversionedId:"testing/test-transfer",id:"testing/test-transfer",isDocsHomePage:!1,title:"Testing a transfer function",description:"A basic overview to help you write out your checks and balances.",source:"@site/docs/04-testing/test-transfer.md",sourceDirName:"04-testing",slug:"/testing/test-transfer",permalink:"/substrate-how-to-guides/docs/testing/test-transfer",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/04-testing/test-transfer.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,keywords:"testing, runtime, beginner"},sidebar:"tutorialSidebar",previous:{title:"Calculating fees",permalink:"/substrate-how-to-guides/docs/weights/calculate-fees"},next:{title:"Setting up tests for your pallet",permalink:"/substrate-how-to-guides/docs/testing/basic-pallet-testing"}},i=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Outline the <code>transfer</code> function",id:"1-outline-the-transfer-function",children:[]},{value:"2. Check that the sender has enough balance",id:"2-check-that-the-sender-has-enough-balance",children:[]},{value:"3. Check that sending account doesn&#39;t go below minimum balance",id:"3-check-that-sending-account-doesnt-go-below-minimum-balance",children:[]},{value:"4. Check that both tests work together",id:"4-check-that-both-tests-work-together",children:[]},{value:"5. Handle dust accounts",id:"5-handle-dust-accounts",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Resources",id:"resources",children:[]}],u={toc:i};function l(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(r.default)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"A basic overview to help you write out your checks and balances.")),Object(o.mdx)("h2",{id:"goal"},"Goal"),Object(o.mdx)("p",null,"Learn how to write tests and improve the correctness of a ",Object(o.mdx)("inlineCode",{parentName:"p"},"transfer")," function."),Object(o.mdx)("h2",{id:"use-cases"},"Use cases"),Object(o.mdx)("p",null,"Testing a custom transfer function."),Object(o.mdx)("h2",{id:"overview"},"Overview"),Object(o.mdx)("p",null,"Testing each function is an imporant part of developing pallets for production. This guide\nsteps you through best practices for writing test cases for a basic ",Object(o.mdx)("inlineCode",{parentName:"p"},"transfer")," function."),Object(o.mdx)("h2",{id:"steps"},"Steps"),Object(o.mdx)("h3",{id:"1-outline-the-transfer-function"},"1. Outline the ",Object(o.mdx)("inlineCode",{parentName:"h3"},"transfer")," function"),Object(o.mdx)("p",null,"A transfer function has two key elements: subtracting a balance from an account and adding that balance to another account.\nHere, we'll start by outlining this function:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"#[pallet::weight(10_000)]\npub (super) fn transfer(\n    origin: OriginFor<T>,\n    to: T::AccountId,\n    #[pallet::compact] amount: T::Balance,\n) -> DispatchResultWithPostInfo {\n    let sender = ensure_signed(origin)?;\n\n    Accounts::<T>::mutate(&sender, |bal| {\n        *bal = bal.saturating_sub(amount);\n    });\n    Accounts::<T>::mutate(&to, |bal| {\n        *bal = bal.saturating_add(amount);\n    });\n    Self::deposit_event(Event::<T>::Transfered(sender, to, amount))\n    Ok(().into())\n}\n")),Object(o.mdx)("h3",{id:"2-check-that-the-sender-has-enough-balance"},"2. Check that the sender has enough balance"),Object(o.mdx)("p",null,"The first thing to verify, is whether the sender has enough balance.\nIn a separate ",Object(o.mdx)("inlineCode",{parentName:"p"},"tests.rs")," file, write out this first test case:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"#[test]\nfn transfer_works() {\n    new_test_ext().execute_with(|| {\n        MetaDataStore::<Test>::put(MetaData {\n            issuance: 0,\n            minter: 1,\n            burner: 1,\n        });\n        // Mint 42 coins to account 2.\n        assert_ok!(RewardCoin::mint(Origin::signed(1), 2, 42));\n        // Send 50 coins to account 3.\n        asset_noop!(RewardCoin::transfer(Origin::signed(2), 3, 50), Error::<T>::InsufficientBalance);\n")),Object(o.mdx)("h4",{id:"configure-error-handling"},"Configure error handling"),Object(o.mdx)("p",null,"To implement some error check, replace ",Object(o.mdx)("inlineCode",{parentName:"p"},"mutate")," with ",Object(o.mdx)("inlineCode",{parentName:"p"},"try_mutate")," to use ",Object(o.mdx)("inlineCode",{parentName:"p"},"ensure!"),".\nThis will check whether ",Object(o.mdx)("em",{parentName:"p"},"bal is greater or equal to amount")," and throw an error message if not:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"Accounts::<T>::try_mutate(&sender, |bal| {\n    ensure!(bal >= amount, Error::<T>::InsufficientBalance);\n    *bal = bal.saturating_sub(amount);\n    Ok(())\n});\n")),Object(o.mdx)("p",null,"Run ",Object(o.mdx)("inlineCode",{parentName:"p"},"cargo test")," from your pallet's directory."),Object(o.mdx)("h3",{id:"3-check-that-sending-account-doesnt-go-below-minimum-balance"},"3. Check that sending account doesn't go below minimum balance"),Object(o.mdx)("h3",{id:"4-check-that-both-tests-work-together"},"4. Check that both tests work together"),Object(o.mdx)("p",null,"Use ",Object(o.mdx)("inlineCode",{parentName:"p"},"#[transactional]")," to generate a wrapper around both checks:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"#[transactional]\n        pub(super) fn transfer(\n/*--snip--*/\n")),Object(o.mdx)("h3",{id:"5-handle-dust-accounts"},"5. Handle dust accounts"),Object(o.mdx)("p",null,"Make sure that sending and receiving accounts aren't dust accounts. Use ",Object(o.mdx)("inlineCode",{parentName:"p"},"T::MinBalance::get()"),":"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-rust"},"/*--snip--*/\n    let new_bal = bal.checked_sub(&amount).ok_or(Error::<T>::InsufficientBalance)?;\n    ensure!(new_bal >= T::MinBalance::get(), Error::<T>::BelowMinBalance);\n/*--snip--*/\n")),Object(o.mdx)("h2",{id:"examples"},"Examples"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://github.com/sacha-l/substrate-how-to-guides/blob/main/how-to-substrate/example-code/template-node/pallets/reward-coin/src/tests.rs#L20-L38"},Object(o.mdx)("inlineCode",{parentName:"a"},"reward-coin")," tests"))),Object(o.mdx)("h2",{id:"resources"},"Resources"),Object(o.mdx)("h4",{id:"rust-docs"},"Rust docs"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/macro.assert_ok.html"},Object(o.mdx)("inlineCode",{parentName:"a"},"assert_ok!"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/macro.assert_noop.html"},Object(o.mdx)("inlineCode",{parentName:"a"},"assert_noop!"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/macro.ensure.html"},Object(o.mdx)("inlineCode",{parentName:"a"},"ensure!"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/storage/trait.StorageMap.html#tymethod.try_mutate"},Object(o.mdx)("inlineCode",{parentName:"a"},"try_mutate")))))}l.isMDXComponent=!0}}]);
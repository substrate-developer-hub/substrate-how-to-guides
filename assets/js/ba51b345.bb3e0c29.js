(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{188:function(e,t,a){"use strict";a.r(t),a.d(t,"MDXContext",(function(){return d})),a.d(t,"MDXProvider",(function(){return p})),a.d(t,"mdx",(function(){return f})),a.d(t,"useMDXComponents",(function(){return m})),a.d(t,"withMDXComponents",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),u=function(e){return function(t){var a=m(t.components);return r.a.createElement(e,s({},t,{components:a}))}},m=function(e){var t=r.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=m(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(a),u=n,p=d["".concat(s,".").concat(u)]||d[u]||h[u]||i;return a?r.a.createElement(p,o(o({ref:t},l),{},{components:a})):r.a.createElement(p,o({ref:t},l))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=b;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var c=2;c<i;c++)s[c]=a[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},78:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(8),i=(a(0),a(188)),s={sidebar_position:1,keywords:"weights, runtime, FRAME v1"},l={unversionedId:"weights/conditional-weight-struct",id:"weights/conditional-weight-struct",isDocsHomePage:!1,title:"Conditional weighting struct",description:"There's always more than one way&mdash;but those can wait.",source:"@site/docs/03-weights/conditional-weight-struct.md",sourceDirName:"03-weights",slug:"/weights/conditional-weight-struct",permalink:"/substrate-how-to-guides/docs/weights/conditional-weight-struct",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/03-weights/conditional-weight-struct.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,keywords:"weights, runtime, FRAME v1"},sidebar:"tutorialSidebar",previous:{title:"Create and use a storage Map",permalink:"/substrate-how-to-guides/docs/pallet-design/storage-map"},next:{title:"Linear weighting struct",permalink:"/substrate-how-to-guides/docs/weights/linear-weight-struct"}},o=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Write the <code>WeighData</code> struct",id:"1-write-the-weighdata-struct",children:[]},{value:"2. Classify dispatch calls",id:"2-classify-dispatch-calls",children:[]},{value:"3. Implement <code>PaysFee</code>",id:"3-implement-paysfee",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Related material",id:"related-material",children:[]}],c={toc:o};function d(e){var t=e.components,a=Object(r.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(n.default)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,Object(i.mdx)("em",{parentName:"p"},"There's always more than one way","\u2014","but those can wait.")),Object(i.mdx)("h2",{id:"goal"},"Goal"),Object(i.mdx)("p",null,"Create and use a custom weighting struct."),Object(i.mdx)("h2",{id:"use-cases"},"Use cases"),Object(i.mdx)("p",null,"Calculate transaction fees by computing correct weights based on the data within a function."),Object(i.mdx)("h2",{id:"overview"},"Overview"),Object(i.mdx)("p",null,"Substrate provides a mechanism known as ",Object(i.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/weight"},"transaction weighting")," to quantify the\nresources consumed while executing a transaction. This approach to a custom weight function\nestablishes a weight value based on some condition. Once defined, it can be used directly\nin your pallet, written as such:"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"#[weight = Conditional(200)]")),Object(i.mdx)("p",null,"Here are the different traits we'll be implementing:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.WeighData.html#impl-WeighData%3CT%3E-for-(Weight%2C%20DispatchClass%2C%20Pays"},Object(i.mdx)("inlineCode",{parentName:"a"},"WeighData")),": Weigh the data in a function."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.PaysFee.html"},Object(i.mdx)("inlineCode",{parentName:"a"},"PaysFee")),": Designate whether the dispatch pays a fee or not."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.ClassifyDispatch.html"},Object(i.mdx)("inlineCode",{parentName:"a"},"ClassifyDispatch")),": A way to tell the runtime about the type of dispatch being made.")),Object(i.mdx)("h2",{id:"steps"},"Steps"),Object(i.mdx)("h3",{id:"1-write-the-weighdata-struct"},"1. Write the ",Object(i.mdx)("inlineCode",{parentName:"h3"},"WeighData")," struct"),Object(i.mdx)("p",null,"Write an implementation of ",Object(i.mdx)("inlineCode",{parentName:"p"},"WeighData")," for ",Object(i.mdx)("inlineCode",{parentName:"p"},"Conditional"),", where the first parameter is a boolean value:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"pub struct Conditional(u32);\n\nimpl WeighData<(&bool, &u32)> for Conditional {\n    fn weigh_data(&self, (switch, val): (&bool, &u32)) -> Weight {\n\n        // If the first parameter is true, then the weight is linear in the second parameter.\n        if *switch {\n            val.saturating_mul(self.0)\n        }\n        // Otherwise the weight is constant.\n        else {\n            self.0\n        }\n    }\n}\n")),Object(i.mdx)("h3",{id:"2-classify-dispatch-calls"},"2. Classify dispatch calls"),Object(i.mdx)("p",null,"Since this implementation of ",Object(i.mdx)("inlineCode",{parentName:"p"},"WeighData")," requires a ",Object(i.mdx)("inlineCode",{parentName:"p"},"DispatchClass"),", use ",Object(i.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/enum.DispatchClass.html"},Object(i.mdx)("inlineCode",{parentName:"a"},"default"))," to classify all calls as normal:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"// Implement ClassifyDispatch\nimpl<T> ClassifyDispatch<T> for Conditional {\n    fn classify_dispatch(&self, _: T) -> DispatchClass {\n        Default::default()\n    }\n}\n")),Object(i.mdx)("h3",{id:"3-implement-paysfee"},"3. Implement ",Object(i.mdx)("inlineCode",{parentName:"h3"},"PaysFee")),Object(i.mdx)("p",null,"Last, specify how ",Object(i.mdx)("inlineCode",{parentName:"p"},"PaysFee")," is used for the custom ",Object(i.mdx)("inlineCode",{parentName:"p"},"WeighData")," struct:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"// Implement PaysFee\nimpl PaysFee for Conditional {\n    fn pays_fee(&self) -> bool {\n        true\n    }\n}\n")),Object(i.mdx)("h2",{id:"examples"},"Examples"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"pallet-weights"),Object(i.mdx)("li",{parentName:"ul"},"pallet-feeless")),Object(i.mdx)("h2",{id:"related-material"},"Related material"),Object(i.mdx)("h4",{id:"how-to-guides"},"How-to guides"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"./linear-weight-struct"},"Linear weighting struct")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"../300/quadratic-weight-struct"},"Quadratic weighting struct"))),Object(i.mdx)("h4",{id:"knowledgebase"},"Knowledgebase"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/weight"},"Transaction Weights")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/docs/en/knowledgebase/runtime/fees"},"Transaction Fees"))),Object(i.mdx)("h4",{id:"other"},"Other"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://wiki.polkadot.network/docs/en/learn-transaction-fees"},"Transaction fees in Polkadot"))))}d.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return s})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return l})),n.d(t,"withMDXComponents",(function(){return u}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),u=function(e){return function(t){var n=l(t.components);return i.a.createElement(e,o({},t,{components:n}))}},l=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},p=function(e){var t=l(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),s=l(n),u=r,p=s["".concat(o,".").concat(u)]||s[u]||g[u]||a;return n?i.a.createElement(p,d(d({ref:t},c),{},{components:n})):i.a.createElement(p,d({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=b;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var m=2;m<a;m++)o[m]=n[m];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return s}));var r=n(3),i=n(8),a=(n(0),n(188)),o={sidebar_position:1,keywords:"storage migration, testing, runtime, tooling"},c={unversionedId:"tools/integrate-try-runtime",id:"tools/integrate-try-runtime",isDocsHomePage:!1,title:"Include `try-runtime` in your project",description:"Learn how to integrate try-runtime in your chain.",source:"@site/docs/08-tools/integrate-try-runtime.md",sourceDirName:"08-tools",slug:"/tools/integrate-try-runtime",permalink:"/substrate-how-to-guides/docs/tools/integrate-try-runtime",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/08-tools/integrate-try-runtime.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,keywords:"storage migration, testing, runtime, tooling"},sidebar:"tutorialSidebar",previous:{title:"Ringbuffer queue",permalink:"/substrate-how-to-guides/docs/storage-migrations/ringbuffer"},next:{title:"Create a `txwrapper` for a chain",permalink:"/substrate-how-to-guides/docs/tools/create-tx-wrapper-package"}},d=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Adding <code>runtime</code> dependencies",id:"1-adding-runtime-dependencies",children:[]},{value:"2. Adding <code>node</code> dependencies",id:"2-adding-node-dependencies",children:[]},{value:"3. Using <code>try-runtime</code>",id:"3-using-try-runtime",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Resources",id:"resources",children:[]}],m={toc:d};function s(e){var t=e.components,n=Object(i.default)(e,["components"]);return Object(a.mdx)("wrapper",Object(r.default)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,Object(a.mdx)("em",{parentName:"p"},"Learn how to integrate try-runtime in your chain.")),Object(a.mdx)("h2",{id:"goal"},"Goal"),Object(a.mdx)("p",null,"Include ",Object(a.mdx)("inlineCode",{parentName:"p"},"try-runtime")," to use it in a Substrate node."),Object(a.mdx)("h2",{id:"use-cases"},"Use cases"),Object(a.mdx)("p",null,"Use ",Object(a.mdx)("inlineCode",{parentName:"p"},"try-runtime")," to test a storage migration."),Object(a.mdx)("h2",{id:"overview"},"Overview"),Object(a.mdx)("p",null,"The ",Object(a.mdx)("inlineCode",{parentName:"p"},"try-runtime")," tool is useful for running tests before launching a runtime to production. This is a simple guide\nwhich steps through which dependencies to include and where to include them in order to use it inside a runtime. "),Object(a.mdx)("div",{className:"admonition admonition-warning alert alert--danger"},Object(a.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(a.mdx)("h5",{parentName:"div"},Object(a.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(a.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(a.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),Object(a.mdx)("div",{parentName:"div",className:"admonition-content"},Object(a.mdx)("p",{parentName:"div"},"Be sure to use the latest ",Object(a.mdx)("inlineCode",{parentName:"p"},"monthly-*")," tag when adding your dependencies."))),Object(a.mdx)("h2",{id:"steps"},"Steps"),Object(a.mdx)("h3",{id:"1-adding-runtime-dependencies"},"1. Adding ",Object(a.mdx)("inlineCode",{parentName:"h3"},"runtime")," dependencies"),Object(a.mdx)("h4",{id:"in-runtimecargotoml"},"In ",Object(a.mdx)("inlineCode",{parentName:"h4"},"runtime/Cargo.toml")),Object(a.mdx)("p",null,"Add the FRAME dependency:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-rust"},"[dependencies]\nframe-try-runtime = { git = 'https://github.com/paritytech/substrate.git', tag = 'monthly-2021-07', optional = true }\ntry-runtime-cli = { git = 'https://github.com/paritytech/substrate.git', tag = 'monthly-2021-07', optional = true }    \n\n/* --snip-- */\n    std = [\n    /* --snip-- */\n    \"frame-try-runtime/std\",\n]\n")),Object(a.mdx)("h4",{id:"in-runtimecargotoml-for-every-pallet-in-your-runtime"},"In ",Object(a.mdx)("inlineCode",{parentName:"h4"},"runtime/Cargo.toml"),", for every pallet in your runtime:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-rust"},'try-runtime = [\n    "frame-executive/try-runtime",\n    "frame-try-runtime",\n    "frame-system/try-runtime",\n]\n')),Object(a.mdx)("h4",{id:"in-runtimesrclibrs-implement-it-for-your-runtime"},"In ",Object(a.mdx)("inlineCode",{parentName:"h4"},"runtime/src/lib.rs"),", implement it for your runtime:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-rust"},'    #[cfg(feature = "try-runtime")]\n    impl frame_try_runtime::TryRuntime<Block> for Runtime {\n        fn on_runtime_upgrade() -> Result<(Weight, Weight), sp_runtime::RuntimeString> {\n            log::info!("try-runtime::on_runtime_upgrade.");\n            let weight = Executive::try_runtime_upgrade()?;\n            Ok((weight, BlockWeights::get().max_block))\n        }\n    }\n')),Object(a.mdx)("h3",{id:"2-adding-node-dependencies"},"2. Adding ",Object(a.mdx)("inlineCode",{parentName:"h3"},"node")," dependencies"),Object(a.mdx)("h4",{id:"in-nodecargotoml-always-check-for-the-latest-version"},"In ",Object(a.mdx)("inlineCode",{parentName:"h4"},"node/Cargo.toml")," (always check for the latest version):"),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-rust"},"[features]\n/* --snip-- */\ncli = [\n    'try-runtime-cli',\n]\ntry-runtime = [\n    \"node-template-runtime/try-runtime\",\n    \"try-runtime-cli\",\n]\n\n/* --snip-- */\nframe-try-runtime = { git = 'https://github.com/paritytech/substrate.git', tag = 'monthly-2021-07', optional = true }\ntry-runtime-cli = { git = 'https://github.com/paritytech/substrate.git', tag = 'monthly-2021-07', optional = true }\n/* --snip-- */\n\n")),Object(a.mdx)("h4",{id:"in-nodesrcclirs-add-the-subcommands"},"In ",Object(a.mdx)("inlineCode",{parentName:"h4"},"node/src/cli.rs")," add the subcommands:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-rust"},'/* --snip-- */\n    /// Try some command against runtime state.\n    #[cfg(feature = "try-runtime")]\n    TryRuntime(try_runtime_cli::TryRuntimeCmd),\n\n    /// Try some command against runtime state. Note: `try-runtime` feature must be enabled.\n    #[cfg(not(feature = "try-runtime"))]\n    TryRuntime,\n/* --snip-- */\n')),Object(a.mdx)("h4",{id:"in-nodesrccommandsrs-add"},"In ",Object(a.mdx)("inlineCode",{parentName:"h4"},"node/src/commands.rs"),", add:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-rust"},'/* --snip-- */\n        #[cfg(feature = "try-runtime")]\n        Some(Subcommand::TryRuntime(cmd)) => {\n            let runner = cli.create_runner(cmd)?;\n            runner.async_run(|config| {\n                // we don\'t need any of the components of new_partial, just a runtime, or a task\n                // manager to do `async_run`.\n                let registry = config.prometheus_config.as_ref().map(|cfg| &cfg.registry);\n                let task_manager = sc_service::TaskManager::new(\n                    config.task_executor.clone(),\n                    registry,\n                ).map_err(|e| sc_cli::Error::Service(sc_service::Error::Prometheus(e)))?;\n\n                Ok((cmd.run::<Block, Executor>(config), task_manager))\n            })\n        },\n\n        #[cfg(not(feature = "try-runtime"))]\n        Some(Subcommand::TryRuntime) => {\n            Err("TryRuntime wasn\'t enabled when building the node. \\\n                You can enable it with `--features try-runtime`.".into())\n        },\n/* --snip-- */\n')),Object(a.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(a.mdx)("h5",{parentName:"div"},Object(a.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(a.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(a.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(a.mdx)("div",{parentName:"div",className:"admonition-content"},Object(a.mdx)("p",{parentName:"div"},"If you're using custom pallets in your workspace, make sure you included\n",Object(a.mdx)("inlineCode",{parentName:"p"},"try-runtime")," in the dependencies inside the ",Object(a.mdx)("inlineCode",{parentName:"p"},"pallets/pallet_name/Cargo.toml")," file of your workspace."))),Object(a.mdx)("h3",{id:"3-using-try-runtime"},"3. Using ",Object(a.mdx)("inlineCode",{parentName:"h3"},"try-runtime")),Object(a.mdx)("p",null,"Just like writing unit tests, to use ",Object(a.mdx)("inlineCode",{parentName:"p"},"try-runtime")," create an externalities instance and call ",Object(a.mdx)("inlineCode",{parentName:"p"},"execute_with")," on it. "),Object(a.mdx)("p",null,"Refer to ",Object(a.mdx)("a",{parentName:"p",href:"/todo"},"this guide")," to learn more on how to do this."),Object(a.mdx)("h2",{id:"examples"},"Examples"),Object(a.mdx)("h2",{id:"resources"},"Resources"),Object(a.mdx)("h4",{id:"knowledgebase"},"Knowledgebase"),Object(a.mdx)("h4",{id:"other"},"Other"))}s.isMDXComponent=!0}}]);
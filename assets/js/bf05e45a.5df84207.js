(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{188:function(e,t,a){"use strict";a.r(t),a.d(t,"MDXContext",(function(){return u})),a.d(t,"MDXProvider",(function(){return p})),a.d(t,"mdx",(function(){return b})),a.d(t,"useMDXComponents",(function(){return m})),a.d(t,"withMDXComponents",(function(){return d}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=n.a.createContext({}),d=function(e){return function(t){var a=m(t.components);return n.a.createElement(e,s({},t,{components:a}))}},m=function(e){var t=n.a.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=m(e.components);return n.a.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},f=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(a),d=r,p=u["".concat(s,".").concat(d)]||u[d]||h[d]||i;return a?n.a.createElement(p,l(l({ref:t},c),{},{components:a})):n.a.createElement(p,l({ref:t},c))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var o=2;o<i;o++)s[o]=a[o];return n.a.createElement.apply(null,s)}return n.a.createElement.apply(null,a)}f.displayName="MDXCreateElement"},79:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return u}));var r=a(3),n=a(8),i=(a(0),a(188)),s={sidebar_position:3,keywords:"weights, runtime, FRAME v1"},c={unversionedId:"weights/quadratic-weight-struct",id:"weights/quadratic-weight-struct",isDocsHomePage:!1,title:"Quadratic weighting struct",description:"A tool for weighting more complex transactions.",source:"@site/docs/03-weights/quadratic-weight-struct.md",sourceDirName:"03-weights",slug:"/weights/quadratic-weight-struct",permalink:"/substrate-how-to-guides/docs/weights/quadratic-weight-struct",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/03-weights/quadratic-weight-struct.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,keywords:"weights, runtime, FRAME v1"},sidebar:"tutorialSidebar",previous:{title:"Linear weighting struct",permalink:"/substrate-how-to-guides/docs/weights/linear-weight-struct"},next:{title:"Calculating fees",permalink:"/substrate-how-to-guides/docs/weights/calculate-fees"}},l=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Write the <code>Quadratic</code> struct",id:"1-write-the-quadratic-struct",children:[]},{value:"2. Classify dispatch calls",id:"2-classify-dispatch-calls",children:[]},{value:"3. Implement <code>PaysFee</code>",id:"3-implement-paysfee",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Related material",id:"related-material",children:[]}],o={toc:l};function u(e){var t=e.components,a=Object(n.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.default)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,Object(i.mdx)("em",{parentName:"p"},"A tool for weighting more complex transactions.")),Object(i.mdx)("h2",{id:"goal"},"Goal"),Object(i.mdx)("p",null,"Calculate transaction weights for transactions with 3 or more parameters."),Object(i.mdx)("h2",{id:"use-cases"},"Use cases"),Object(i.mdx)("p",null,"Calculate correct weight based on data within a function, required to calculate transaction fees."),Object(i.mdx)("h2",{id:"overview"},"Overview"),Object(i.mdx)("p",null,"This is a more complex way scale to weight transactions. It computes weight according to the following formula:"),Object(i.mdx)("p",null,Object(i.mdx)("em",{parentName:"p"},"a",Object(i.mdx)("em",{parentName:"em"},"x^2 + b"),"y + c")),Object(i.mdx)("p",null,"Where a, b, and c are fields in the struct, and x and y are transaction parameters. Have a look at the ","[examples][#examples]","\nsection to see it implemented and used in context."),Object(i.mdx)("h2",{id:"steps"},"Steps"),Object(i.mdx)("h3",{id:"1-write-the-quadratic-struct"},"1. Write the ",Object(i.mdx)("inlineCode",{parentName:"h3"},"Quadratic")," struct"),Object(i.mdx)("p",null,"Write a weighting struct that weighs transactions where the first parameter is a boolean value."),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"pub struct Quadratic(u32, u32, u32);\n\nimpl WeighData<(&u32, &u32)> for Quadratic {\n    fn weigh_data(&self, (x, y): (&u32, &u32)) -> Weight {\n        let ax2 = x.saturating_mul(*x).saturating_mul(self.0);\n        let by = y.saturating_mul(self.1);\n        let c = self.2;\n\n        ax2.saturating_add(by).saturating_add(c).into()\n    }\n}\n")),Object(i.mdx)("h3",{id:"2-classify-dispatch-calls"},"2. Classify dispatch calls"),Object(i.mdx)("p",null,"Since this implementation of ",Object(i.mdx)("inlineCode",{parentName:"p"},"WeighData")," requires a ",Object(i.mdx)("inlineCode",{parentName:"p"},"DispatchClass"),", use ",Object(i.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/enum.DispatchClass.html"},Object(i.mdx)("inlineCode",{parentName:"a"},"default"))," to classify all calls as normal."),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"// Implement ClassifyDispatch.\nimpl<T> ClassifyDispatch<T> for Quadratic {\n    fn classify_dispatch(&self, _: T) -> DispatchClass {\n        // Classify all calls as Normal (which is the default)\n        Default::default()\n    }\n}\n")),Object(i.mdx)("h3",{id:"3-implement-paysfee"},"3. Implement ",Object(i.mdx)("inlineCode",{parentName:"h3"},"PaysFee")),Object(i.mdx)("p",null,"Last, specify how ",Object(i.mdx)("inlineCode",{parentName:"p"},"PaysFee")," is used for the custom ",Object(i.mdx)("inlineCode",{parentName:"p"},"WeighData")," struct."),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"// Implement PaysFee.\nimpl<T> PaysFee<T> for Quadratic {\n    fn pays_fee(&self, _: T) -> Pays {\n        Pays::Yes\n    }\n}\n")),Object(i.mdx)("h2",{id:"examples"},"Examples"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Feeless transaction pallet"),Object(i.mdx)("li",{parentName:"ul"},"pallet-weights")),Object(i.mdx)("h2",{id:"related-material"},"Related material"),Object(i.mdx)("h4",{id:"how-to-guides"},"How-to guides"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"./linear-weight-struct"},"Linear weighting struct")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"../300/quadratic-weight-struct"},"Quadratic weighting struct"))),Object(i.mdx)("h4",{id:"knowledgebase"},"Knowledgebase"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/weight"},"Transaction Weights")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://substrate.dev/docs/en/knowledgebase/runtime/fees"},"Transaction Fees"))),Object(i.mdx)("h4",{id:"other"},"Other"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://wiki.polkadot.network/docs/en/learn-transaction-fees"},"Transaction fees in Polkadot"))))}u.isMDXComponent=!0}}]);
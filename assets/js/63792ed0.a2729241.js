(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{188:function(e,t,a){"use strict";a.r(t),a.d(t,"MDXContext",(function(){return u})),a.d(t,"MDXProvider",(function(){return p})),a.d(t,"mdx",(function(){return f})),a.d(t,"useMDXComponents",(function(){return m})),a.d(t,"withMDXComponents",(function(){return d}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var u=i.a.createContext({}),d=function(e){return function(t){var a=m(t.components);return i.a.createElement(e,s({},t,{components:a}))}},m=function(e){var t=i.a.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=m(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),u=m(a),d=n,p=u["".concat(s,".").concat(d)]||u[d]||h[d]||r;return a?i.a.createElement(p,c(c({ref:t},o),{},{components:a})):i.a.createElement(p,c({ref:t},o))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var l=2;l<r;l++)s[l]=a[l];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},55:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return u}));var n=a(3),i=a(8),r=(a(0),a(188)),s={sidebar_position:5,keywords:"basics, weights, runtime, FRAME V1"},o={unversionedId:"basics/basic-tx-weight-calculations",id:"basics/basic-tx-weight-calculations",isDocsHomePage:!1,title:"Calculating transaction weights",description:"Been here long enough to know these weights are actually pretty darn important ...",source:"@site/docs/01-basics/basic-tx-weight-calculations.md",sourceDirName:"01-basics",slug:"/basics/basic-tx-weight-calculations",permalink:"/substrate-how-to-guides/docs/basics/basic-tx-weight-calculations",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/01-basics/basic-tx-weight-calculations.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,keywords:"basics, weights, runtime, FRAME V1"},sidebar:"tutorialSidebar",previous:{title:"Configure a runtime constant",permalink:"/substrate-how-to-guides/docs/basics/configurable-constants"},next:{title:"Basic instantiable pallets",permalink:"/substrate-how-to-guides/docs/basics/basic-instantiable-pallets"}},c=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Import weight configuration tools",id:"1-import-weight-configuration-tools",children:[]},{value:"2. Calculate maximum weight before a function",id:"2-calculate-maximum-weight-before-a-function",children:[]},{value:"3. Calculate the actual weight linked to function&#39;s logic",id:"3-calculate-the-actual-weight-linked-to-functions-logic",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Related material",id:"related-material",children:[]}],l={toc:c};function u(e){var t=e.components,a=Object(i.default)(e,["components"]);return Object(r.mdx)("wrapper",Object(n.default)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,Object(r.mdx)("em",{parentName:"p"},"Been here long enough to know these weights are actually pretty darn important ...")),Object(r.mdx)("div",{className:"admonition admonition-info alert alert--info"},Object(r.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(r.mdx)("h5",{parentName:"div"},Object(r.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.mdx)("div",{parentName:"div",className:"admonition-content"},Object(r.mdx)("p",{parentName:"div"},"This guide shows a basic procedure for confirguring weights. There are more advanced methods that suit different use cases. For simple functions with fixed amount of storage reads, this method works well."))),Object(r.mdx)("h2",{id:"goal"},"Goal"),Object(r.mdx)("p",null,"Understand how to calculate transaction weights for a basic dispatch function."),Object(r.mdx)("h2",{id:"use-cases"},"Use cases"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Assign the correct weight before a function call to storage."),Object(r.mdx)("li",{parentName:"ul"},"Calculate transaction fees.")),Object(r.mdx)("h2",{id:"overview"},"Overview"),Object(r.mdx)("p",null,"Weights are an important part of Substrate development as they provide information about what the maximum cost a function can be in terms of the block size it will take up. This way, the ",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/weight"},"weighting system")," checks what the cost will be before a function is executed. As runtime engineers, we care a lot about weights. Not only do they help add security checks around the functions we create, but they also force us to think about the computational ressources consumed by a transaction. From that, we can figure out ",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/docs/en/knowledgebase/runtime/fees"},"what fees to charge")," users."),Object(r.mdx)("p",null,"This guide will cover how to calculate the maximum weight for a dispatch call; calculate the actual weight after execution; and\nreimburse the difference."),Object(r.mdx)("p",null,"Here's an overview of the traits we'll be implementing:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.PaysFee.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"PaysFee")),": to specify whether or not a dispatch pays the fee."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.GetDispatchInfo.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"GetDispatchInfo")),": carries weight information using the ",Object(r.mdx)("inlineCode",{parentName:"li"},"#[weight]")," attribute."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://docs.rs/frame-support/3.0.0/frame_support/dispatch/type.DispatchResultWithPostInfo.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"DispatchResultWithPostInfo")),": provides new weight info once the extrinsic function has been executed.")),Object(r.mdx)("h2",{id:"steps"},"Steps"),Object(r.mdx)("h3",{id:"1-import-weight-configuration-tools"},"1. Import weight configuration tools"),Object(r.mdx)("p",null,"Make sure you have the right dependencies:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"use frame_support::Parameter;\nuse frame_support::weights::{GetDispatchInfo, Pays};\nuse sp_runtime::traits::Dispatchable;\nuse frame_support::pallet_prelude::{DispatchResultWithPostInfo};\nuse frame_support::dispatch::DispatchResult;\n")),Object(r.mdx)("h3",{id:"2-calculate-maximum-weight-before-a-function"},"2. Calculate maximum weight before a function"),Object(r.mdx)("p",null,"Using ",Object(r.mdx)("inlineCode",{parentName:"p"},"call.get_dispatch_info()"),", calculate the maximum possible weight before the function is declared:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"#[weight = {\n            let dispatch_info = call.get_dispatch_info();\n            (dispatch_info.weight, dispatch_info.class, Pays::Yes)\n            }]\n\n      // Define a function header that returns DispatchResultWithPostInfo.\n          fn do_three_reads(origin, call: Box<<T as Config>::Call>) -> DispatchResultWithPostInfo {\n      // Function logic.\n        }\n")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"GetDispatchInfo")," provides the ",Object(r.mdx)("inlineCode",{parentName:"p"},"get_dispatch_info()")," method we need to retrieve information about the function's weight."),Object(r.mdx)("h3",{id:"3-calculate-the-actual-weight-linked-to-functions-logic"},"3. Calculate the actual weight linked to function's logic"),Object(r.mdx)("p",null,"The actual weight of a function call depends on the logic of the extrinsic. After execution, we can give back fees once the actual weight has been calculated. Handle this using the ",Object(r.mdx)("a",{parentName:"p",href:"https://docs.rs/frame-support/3.0.0/frame_support/weights/enum.Pays.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"Pays")," Enum")," and ",Object(r.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_system/pallet/trait.Config.html#associatedtype.DbWeight"},Object(r.mdx)("inlineCode",{parentName:"a"},"DbWeight")),"."),Object(r.mdx)("p",null,"For a function whose logic does 3 storage reads, calculate it using ",Object(r.mdx)("inlineCode",{parentName:"p"},"DbWeight")," and return it at the end of the function:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-rust"},"// Function returns a calculation corresponding to 3 DB reads\nlet check_logic_weight = T::DbWeight::get().reads(3);\nreturn Ok(Some(check_logic_weight).into())\n\n//Remove fee assoicated to weight\nOk(Pays::Yes.into())\n")),Object(r.mdx)("h2",{id:"examples"},"Examples"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://github.com/shawntabrizi/substrate-feeless-token-factory#user-story"},"Feeless transaction use case"))),Object(r.mdx)("h2",{id:"related-material"},"Related material"),Object(r.mdx)("h4",{id:"knowledgebase"},"Knowledgebase"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://substrate.dev/docs/en/knowledgebase/learn-substrate/weight"},"Transaction Weights")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://substrate.dev/docs/en/knowledgebase/runtime/fees"},"Transaction Fees Knowledgebase"))),Object(r.mdx)("h4",{id:"rust-docs"},"Rust docs"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.ClassifyDispatch.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"ClassifyDispatch"))),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/weights/trait.WeighData.html"},Object(r.mdx)("inlineCode",{parentName:"a"},"WeightData")))),Object(r.mdx)("h4",{id:"other"},"Other"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",{parentName:"li",href:"https://wiki.polkadot.network/docs/en/learn-transaction-fees"},"Polkadot's Transaction Fees"))))}u.isMDXComponent=!0}}]);
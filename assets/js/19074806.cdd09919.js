(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return m})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return b})),n.d(t,"useMDXComponents",(function(){return u})),n.d(t,"withMDXComponents",(function(){return l}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=r.a.createContext({}),l=function(e){return function(t){var n=u(t.components);return r.a.createElement(e,o({},t,{components:n}))}},u=function(e){var t=r.a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(m.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=u(n),l=a,p=m["".concat(o,".").concat(l)]||m[l]||g[l]||i;return n?r.a.createElement(p,c(c({ref:t},s),{},{components:n})):r.a.createElement(p,c({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},41:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return m}));var a=n(3),r=n(8),i=(n(0),n(188)),o={sidebar_position:1,keywords:"storage migration, runtime"},s={unversionedId:"storage-migrations/nicks-migration",id:"storage-migrations/nicks-migration",isDocsHomePage:!1,title:"Basic storage migration",description:"A simple migration guide using the Nicks pallet as a reference.",source:"@site/docs/05-storage-migrations/nicks-migration.md",sourceDirName:"05-storage-migrations",slug:"/storage-migrations/nicks-migration",permalink:"/substrate-how-to-guides/docs/storage-migrations/nicks-migration",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/05-storage-migrations/nicks-migration.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,keywords:"storage migration, runtime"},sidebar:"tutorialSidebar",previous:{title:"Setting up tests for your pallet",permalink:"/substrate-how-to-guides/docs/testing/basic-pallet-testing"},next:{title:"Trigger a storage migration",permalink:"/substrate-how-to-guides/docs/storage-migrations/migration-steps-polkadotjs"}},c=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Create a storage struct and utility type",id:"1-create-a-storage-struct-and-utility-type",children:[]},{value:"2. Update your storage items",id:"2-update-your-storage-items",children:[]},{value:"3. Update all functions",id:"3-update-all-functions",children:[]},{value:"4. Declare a migration module",id:"4-declare-a-migration-module",children:[]},{value:"5. Write <code>migrate_to_v2</code>",id:"5-write-migrate_to_v2",children:[]},{value:"6. Create a <code>types.json</code> file",id:"6-create-a-typesjson-file",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Resources",id:"resources",children:[]}],d={toc:c};function m(e){var t=e.components,n=Object(r.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.default)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,Object(i.mdx)("em",{parentName:"p"},"A simple migration guide using the Nicks pallet as a reference.")),Object(i.mdx)("h2",{id:"goal"},"Goal"),Object(i.mdx)("p",null,"Write a storage migration for a pallet that adds an additional ",Object(i.mdx)("inlineCode",{parentName:"p"},"Vec<u8>")," storage item to runtime storage."),Object(i.mdx)("h2",{id:"use-cases"},"Use cases"),Object(i.mdx)("p",null,"A pallet that adds a single storage item and needs to be included in a runtime upgrade."),Object(i.mdx)("h2",{id:"overview"},"Overview"),Object(i.mdx)("p",null,"This guide will step through a storage migration on ",Object(i.mdx)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/tree/master/frame/nicks"},"FRAME's Nick's pallet"),". It shows how to modify a storage map to\nprovide an optional field that includes a last name, and how to write the migration function ready to be triggered upon a runtime upgrade. This guide can equally be used in other contexts which require a simple storage migration that modifies a storage map in a runtime."),Object(i.mdx)("h2",{id:"steps"},"Steps"),Object(i.mdx)("h3",{id:"1-create-a-storage-struct-and-utility-type"},"1. Create a storage struct and utility type"),Object(i.mdx)("p",null,"Write a struct to manage the previous and new storage items, first and last:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"pub struct Nickname {\n    first: Vec<u8>,\n    last: Option<Vec<u8>>, // handles empty storage\n}\n")),Object(i.mdx)("p",null,"Write a utility type enum to keep track of the storage versions:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"#[derive(codec::Encode, codec::Decode, Clone, frame_support::RuntimeDebug, PartialEq)]\npub enum StorageVersion {\n    V1Bytes,\n    V2Struct,\n}\n")),Object(i.mdx)("h3",{id:"2-update-your-storage-items"},"2. Update your storage items"),Object(i.mdx)("p",null,"The Nicks pallet only keeps track of a lookup table in storage, but we also need to add ",Object(i.mdx)("inlineCode",{parentName:"p"},"PalletVersion")," to\ndeclare the current version in storage. To update these items, use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Nickname")," struct in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"NameOf")," item and add the new storage item ",Object(i.mdx)("inlineCode",{parentName:"p"},"PalletVersion"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"decl_storage! {\n    trait Store for Module<T: Trait> as MyNicks {\n        /// The lookup table for names.\n        NameOf: map hasher(twox_64_concat) T::AccountId => Option<(Nickname, BalanceOf<T>)>;\n        /// The current version of the pallet.\n        PalletVersion: StorageVersion = StorageVersion::V1Bytes;\n    }\n}\n")),Object(i.mdx)("h3",{id:"3-update-all-functions"},"3. Update all functions"),Object(i.mdx)("p",null,"All of the Nicks pallet functions need to account for the new ",Object(i.mdx)("inlineCode",{parentName:"p"},"last: Option<Vec<u8>>")," storage item. Update each function by adding it as a parameter, for example:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"//--snip\nfn force_name(origin,\n    target: <T::Lookup as StaticLookup>::Source,\n    first: Vec<u8>,\n    last: Option<Vec<u8>>) {\n//--snip\n    }\n")),Object(i.mdx)("p",null,"In addition, update all storage writes with the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Nickname")," struct:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"<NameOf<T>>::insert(&sender, (Nickname { first, last }, deposit));\n")),Object(i.mdx)("h3",{id:"4-declare-a-migration-module"},"4. Declare a migration module"),Object(i.mdx)("p",null,"The migration module should contain two parts:"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},"A module indicating the deprecated storage to migrate from."),Object(i.mdx)("li",{parentName:"ol"},"The migration function which returns a weight.")),Object(i.mdx)("p",null,"The scaffolding of this module looks like this:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"pub mod migration {\n    use super::*;\n\n    pub mod v1 {...} // only contains V1 storage format\n\n    pub fn migrate_to_v2<T: Config>() -> frame_support::weights::Weight {...} // contains checks and transforms storage to V2 format\n}\n")),Object(i.mdx)("h3",{id:"5-write-migrate_to_v2"},"5. Write ",Object(i.mdx)("inlineCode",{parentName:"h3"},"migrate_to_v2")),Object(i.mdx)("p",null,"Here's an overview of what this function needs to do:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Check the storage version to make sure a migration is needed (good practice)"),Object(i.mdx)("li",{parentName:"ul"},"Transform the storage values into the new storage format"),Object(i.mdx)("li",{parentName:"ul"},"Update the storage version"),Object(i.mdx)("li",{parentName:"ul"},"Return the weight consumed by the migration")),Object(i.mdx)("h4",{id:"check-the-storage-version"},"Check the storage version"),Object(i.mdx)("p",null,"Construct the ",Object(i.mdx)("inlineCode",{parentName:"p"},"migrate_to_v2")," logic around the check. If the storage migration doesn't need to happen, return 0:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},'if PalletVersion::get() == StorageVersion::V1Bytes {\n\n    // migrate to v2\n\n} else {\n    frame_support::debug::info!(" >>> Unused migration!");\n    0\n}\n')),Object(i.mdx)("h4",{id:"transform-storage-values"},"Transform storage values"),Object(i.mdx)("p",null,"Using the ",Object(i.mdx)("a",{parentName:"p",href:"https://crates.parity.io/frame_support/storage/types/struct.StorageMap.html#method.translate"},Object(i.mdx)("inlineCode",{parentName:"a"},"translate storage method")),",\ntransform the storage values to the new format. Since the existing ",Object(i.mdx)("inlineCode",{parentName:"p"},"nick")," value in storage can be made of a string separated by a\nspace, split it at the ",Object(i.mdx)("inlineCode",{parentName:"p"},"' '")," and place anything after that into the new ",Object(i.mdx)("inlineCode",{parentName:"p"},"last")," storage item. If it isn't, ",Object(i.mdx)("inlineCode",{parentName:"p"},"last")," takes the ",Object(i.mdx)("inlineCode",{parentName:"p"},"None")," value:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"NameOf::<T>::translate::<(Vec<u8>, BalanceOf<T>), _>(\n  |k: T::AccountId, (nick, deposit): (Vec<u8>, BalanceOf<T>)| {\n    // We split the nick at ' ' (<space>).\n    match nick.iter().rposition(|&x| x == b\" \"[0]) {\n        Some(ndx) => Some((Nickname {\n          first: nick[0..ndx].to_vec(),\n                  last: Some(nick[ndx + 1..].to_vec())\n          }, deposit)),\n          None => Some((Nickname { first: nick, last: None }, deposit))\n      }\n        }\n    );\n")),Object(i.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.mdx)("div",{parentName:"div",className:"admonition-heading"},Object(i.mdx)("h5",{parentName:"div"},Object(i.mdx)("span",{parentName:"h5",className:"admonition-icon"},Object(i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.mdx)("div",{parentName:"div",className:"admonition-content"},Object(i.mdx)("p",{parentName:"div"},"remove ",Object(i.mdx)("inlineCode",{parentName:"p"},"Option")," wrapping to make sure decoding works properly."))),Object(i.mdx)("h4",{id:"return-the-consumed-weight"},"Return the consumed weight"),Object(i.mdx)("p",null,"To do this, count the number of storage reads and writes and return the corresponding weight:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"let count = NameOf::<T>::iter().count();\nT::DbWeight::get().reads_writes(count as Weight + 1, count as Weight + 1)\n")),Object(i.mdx)("h4",{id:"use-migrate_to_v2-in-on_runtime_upgrade"},"Use ",Object(i.mdx)("inlineCode",{parentName:"h4"},"migrate_to_v2")," in ",Object(i.mdx)("inlineCode",{parentName:"h4"},"on_runtime_upgrade")),Object(i.mdx)("p",null,"Go back to the pallet's functions and specify the ",Object(i.mdx)("inlineCode",{parentName:"p"},"migrate_to_v2")," function in ",Object(i.mdx)("inlineCode",{parentName:"p"},"on_runtime_upgrade"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},"fn on_runtime_upgrade() -> frame_support::weights::Weight {\n            migration::migrate_to_v2::<T>()\n        }\n    }\n}\n")),Object(i.mdx)("h3",{id:"6-create-a-typesjson-file"},"6. Create a ",Object(i.mdx)("inlineCode",{parentName:"h3"},"types.json")," file"),Object(i.mdx)("p",null,"Put the new storage types in a ",Object(i.mdx)("inlineCode",{parentName:"p"},"types.json")," which you will need to trigger the migration using a UI. Our new types in JSON are:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",{parentName:"pre",className:"language-rust"},'{\n  "Nickname": {\n    "first": "Vec<u8>",\n    "last": "Option<Vec<u8>>"\n  },\n  "StorageVersion": {\n    "_enum": [\n      "V1Bytes",\n      "V2Struct"\n    ]\n  }\n}\n')),Object(i.mdx)("h2",{id:"examples"},"Examples"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://github.com/substrate-developer-hub/migration-example/pull/2/files"},"Migrating the Nicks pallet"))),Object(i.mdx)("h2",{id:"resources"},"Resources"),Object(i.mdx)("h4",{id:"how-to-guides"},"How-to guides"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"./migration-steps"},"Trigger Migration using Polkadot JS"),": learn how to trigger the migration on a live chain")),Object(i.mdx)("h4",{id:"rust-docs"},"Rust docs"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Rust docs for the ",Object(i.mdx)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/option/"},Object(i.mdx)("inlineCode",{parentName:"a"},"Option")," enum")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",{parentName:"li",href:"https://crates.parity.io/frame_support/storage/migration/index.html"},Object(i.mdx)("inlineCode",{parentName:"a"},"frame_support::storage::migration"))," utility docs")))}m.isMDXComponent=!0}}]);
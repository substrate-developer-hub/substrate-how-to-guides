(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{188:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return d})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return u}));var r=n(0),a=n.n(r);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),u=function(e){return function(t){var n=m(t.components);return a.a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,p=d["".concat(i,".").concat(u)]||d[u]||b[u]||l;return n?a.a.createElement(p,o(o({ref:t},c),{},{components:n})):a.a.createElement(p,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=f;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<l;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(8),l=(n(0),n(188)),i={sidebar_position:5,keywords:"pallet design, currency, intermediate, runtime"},c={unversionedId:"pallet-design/lockable-currency",id:"pallet-design/lockable-currency",isDocsHomePage:!1,title:"Simple staking pallet",description:"Build a composable staking pallet for your runtime.",source:"@site/docs/02-pallet-design/lockable-currency.md",sourceDirName:"02-pallet-design",slug:"/pallet-design/lockable-currency",permalink:"/substrate-how-to-guides/docs/pallet-design/lockable-currency",editUrl:"https://github.com/substrate-developer-hub/substrate-how-to-guides/edit/main/docs/02-pallet-design/lockable-currency.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,keywords:"pallet design, currency, intermediate, runtime"},sidebar:"tutorialSidebar",previous:{title:"Simple crowdfund",permalink:"/substrate-how-to-guides/docs/pallet-design/simple-crowdfund"},next:{title:"Use the Contracts pallet",permalink:"/substrate-how-to-guides/docs/pallet-design/add-contracts-pallet"}},o=[{value:"Goal",id:"goal",children:[]},{value:"Use cases",id:"use-cases",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Steps",id:"steps",children:[{value:"1. Declare relevant imports",id:"1-declare-relevant-imports",children:[]},{value:"2.Declare the <code>LockIdentifier</code> constant",id:"2declare-the-lockidentifier-constant",children:[]},{value:"3. Define the required types",id:"3-define-the-required-types",children:[]},{value:"4. Write out the required functions",id:"4-write-out-the-required-functions",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Related material",id:"related-material",children:[]}],s={toc:o};function d(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(l.mdx)("wrapper",Object(r.default)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.mdx)("p",null,Object(l.mdx)("em",{parentName:"p"},"Build a composable staking pallet for your runtime.")),Object(l.mdx)("h2",{id:"goal"},"Goal"),Object(l.mdx)("p",null,"Write a pallet that allows users to lock funds."),Object(l.mdx)("h2",{id:"use-cases"},"Use cases"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Staking."),Object(l.mdx)("li",{parentName:"ul"},"Conviction voting.")),Object(l.mdx)("h2",{id:"overview"},"Overview"),Object(l.mdx)("p",null,"The ",Object(l.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/trait.LockableCurrency.html"},Object(l.mdx)("inlineCode",{parentName:"a"},"LockableCurrency"))," trait can be very useful in the context of economic systems that enforce accountability by collateralizing fungible resources.\nSubstrate's ",Object(l.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/pallet_staking/index.html"},"staking pallet")," makes use of the same trait to handle locked funds in time-based increments. In\nthis guide, we will make use of it in our own custom pallet."),Object(l.mdx)("h2",{id:"steps"},"Steps"),Object(l.mdx)("h3",{id:"1-declare-relevant-imports"},"1. Declare relevant imports"),Object(l.mdx)("p",null,"Import the following traits:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",{parentName:"pre",className:"language-rust"},"use frame_support::{\n    dispatch::DispatchResult,\n    traits::{Currency, LockIdentifier, LockableCurrency, WithdrawReasons},\n};\n")),Object(l.mdx)("h3",{id:"2declare-the-lockidentifier-constant"},"2.Declare the ",Object(l.mdx)("inlineCode",{parentName:"h3"},"LockIdentifier")," constant"),Object(l.mdx)("p",null,"In order to use ",Object(l.mdx)("inlineCode",{parentName:"p"},"LockableCurrency"),", we need to declare a ",Object(l.mdx)("a",{parentName:"p",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/type.LockIdentifier.html"},Object(l.mdx)("inlineCode",{parentName:"a"},"LockIdentifier"))," (must be 8 characters long):"),Object(l.mdx)("pre",null,Object(l.mdx)("code",{parentName:"pre",className:"language-rust"},'const EXAMPLE_ID: LockIdentifier = *b"example ";\n')),Object(l.mdx)("h3",{id:"3-define-the-required-types"},"3. Define the required types"),Object(l.mdx)("p",null,"Define the lockable currency type:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",{parentName:"pre",className:"language-rust"},"type BalanceOf<T> =\n    <<T as Config>::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance;\n/*--snip--*/\n    type Currency: LockableCurrency<Self::AccountId, Moment = Self::BlockNumber>;\n")),Object(l.mdx)("p",null,"The new ",Object(l.mdx)("inlineCode",{parentName:"p"},"BalanceOf<T>")," type satisfies the type constraints of ",Object(l.mdx)("inlineCode",{parentName:"p"},"Self::Balance")," for all provided\nmethods in",Object(l.mdx)("inlineCode",{parentName:"p"},"Currency"),"."),Object(l.mdx)("h3",{id:"4-write-out-the-required-functions"},"4. Write out the required functions"),Object(l.mdx)("p",null,"Our pallet must contain the following key functions to ensure it handles the basic logical components for locking and\nunlocking a currency for a period of time. These are:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"fn set_lock"),": Locks the specified amount of tokens from the caller."),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"fn extend_lock"),": Extends the lock period."),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"fn remove_lock"),": Releases all locked tokens.")),Object(l.mdx)("h4",{id:"fn-lock_capital"},Object(l.mdx)("inlineCode",{parentName:"h4"},"fn lock_capital")),Object(l.mdx)("p",null,"Call the ",Object(l.mdx)("inlineCode",{parentName:"p"},"set_lock()")," method from ",Object(l.mdx)("inlineCode",{parentName:"p"},"Currency"),":"),Object(l.mdx)("pre",null,Object(l.mdx)("code",{parentName:"pre",className:"language-rust"},"    #[pallet::weight(10_000 + T::DbWeight::get().writes(1))]\n    pub(super) fn lock_capital(\n        origin: OriginFor<T>,\n        #[pallet::compact] amount: BalanceOf<T>\n    ) -> DispatchResultWithPostInfo {\n\n        let user = ensure_signed(origin)?;\n\n        T::Currency::set_lock(\n            EXAMPLE_ID,\n            &user,\n            amount,\n            WithdrawReasons::all(),\n        );\n\n        Self::deposit_event(Event::Locked(user, amount));\n        Ok(().into())\n    }\n")),Object(l.mdx)("h4",{id:"fn-extend_lock"},Object(l.mdx)("inlineCode",{parentName:"h4"},"fn extend_lock")),Object(l.mdx)("p",null,"Call the ",Object(l.mdx)("inlineCode",{parentName:"p"},"extend_lock()")," method from ",Object(l.mdx)("inlineCode",{parentName:"p"},"Currency"),":"),Object(l.mdx)("pre",null,Object(l.mdx)("code",{parentName:"pre",className:"language-rust"},"    #[pallet::weight(1_000)]\n    pub(super) fn extend_lock(\n        origin: OriginFor<T>,\n        #[pallet::compact] amount: BalanceOf<T>,\n    ) -> DispatchResultWithPostInfo {\n        let user = ensure_signed(origin)?;\n\n        T::Currency::extend_lock(\n            EXAMPLE_ID,\n            &user,\n            amount,\n            WithdrawReasons::all(),\n        );\n\n        Self::deposit_event(Event::ExtendedLock(user, amount));\n        Ok(().into())\n    }\n")),Object(l.mdx)("h4",{id:"fn-unlock_all"},Object(l.mdx)("inlineCode",{parentName:"h4"},"fn unlock_all")),Object(l.mdx)("p",null,"Call the ",Object(l.mdx)("inlineCode",{parentName:"p"},"remove_lock()")," method from ",Object(l.mdx)("inlineCode",{parentName:"p"},"Currency"),":"),Object(l.mdx)("pre",null,Object(l.mdx)("code",{parentName:"pre",className:"language-rust"},"    #[pallet::weight(1_000)]\n    pub(super) fn unlock_all(\n        origin: OriginFor<T>,\n    ) -> DispatchResultWithPostInfo {\n        let user = ensure_signed(origin)?;\n\n        T::Currency::remove_lock(EXAMPLE_ID, &user);\n\n        Self::deposit_event(Event::Unlocked(user));\n        Ok(().into())\n    }\n")),Object(l.mdx)("h2",{id:"examples"},"Examples"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",{parentName:"li",href:"https://github.com/substrate-developer-hub/substrate-how-to-guides/blob/main/example-code/template-node/pallets/lockable-currency/src/lib.rs"},"lockable-currency-pallet"))),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},Object(l.mdx)("strong",{parentName:"p"},"Further learning \ud83d\udca1 ")),Object(l.mdx)("ul",{parentName:"blockquote"},Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("strong",{parentName:"li"},"Using ",Object(l.mdx)("inlineCode",{parentName:"strong"},"LockIdentifier"),".")," Use this to define logic within the runtime that schedules locking, unlocking, or extends existing locks."),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("strong",{parentName:"li"},"Composability.")," Use this basic scheme when writing other pallets that borrow useful methods from mainstream traits."))),Object(l.mdx)("h2",{id:"related-material"},"Related material"),Object(l.mdx)("h4",{id:"rust-docs"},"Rust docs"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/trait.Currency.html"},"Currency trait")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/trait.LockableCurrency.html"},"LockableCurrency")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",{parentName:"li",href:"https://substrate.dev/rustdocs/latest/frame_support/traits/type.LockIdentifier.html"},"LockIdentifier"))))}d.isMDXComponent=!0}}]);